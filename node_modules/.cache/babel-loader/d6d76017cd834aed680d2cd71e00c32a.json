{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\nexport class TensorBuffer {\n  constructor(shape, dtype, values) {\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);\n    }\n\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n\n\n  set(value, ...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n\n    util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);\n    const index = this.locToIndex(locs);\n    this.values[index] = value;\n  }\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n\n\n  get(...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n\n    let i = 0;\n\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n\n      i++;\n    }\n\n    let index = locs[locs.length - 1];\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n\n    return this.values[index];\n  }\n\n  locToIndex(locs) {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n\n    let index = locs[locs.length - 1];\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n\n    return index;\n  }\n\n  indexToLoc(index) {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n\n    const locs = new Array(this.shape.length);\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n\n\n  toTensor() {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n  }\n\n} // For tracking tensor creation and disposal.\n\nlet trackerFn = null; // Used by chaining methods to call into ops.\n\nlet opHandler = null; // Used to warn about deprecated methods.\n\nlet deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\n\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\n\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\n\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\nexport class Tensor {\n  constructor(shape, dtype, dataId, id) {\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n  /** Flatten a Tensor to a 1D array. */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  flatten() {\n    this.throwIfDisposed();\n    return this.as1D();\n  }\n  /** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  asScalar() {\n    this.throwIfDisposed();\n    util.assert(this.size === 1, () => 'The array must have only 1 element.');\n    return this.reshape([]);\n  }\n  /** Converts a `tf.Tensor` to a `tf.Tensor1D`. */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  as1D() {\n    this.throwIfDisposed();\n    return this.reshape([this.size]);\n  }\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor2D`.\n   *\n   * @param rows Number of rows in `tf.Tensor2D`.\n   * @param columns Number of columns in `tf.Tensor2D`.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  as2D(rows, columns) {\n    this.throwIfDisposed();\n    return this.reshape([rows, columns]);\n  }\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n   *\n   * @param rows Number of rows in `tf.Tensor3D`.\n   * @param columns Number of columns in `tf.Tensor3D`.\n   * @param depth Depth of `tf.Tensor3D`.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  as3D(rows, columns, depth) {\n    this.throwIfDisposed();\n    return this.reshape([rows, columns, depth]);\n  }\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor4D`.\n   *\n   * @param rows Number of rows in `tf.Tensor4D`.\n   * @param columns Number of columns in `tf.Tensor4D`.\n   * @param depth Depth of `tf.Tensor4D`.\n   * @param depth2 4th dimension of `tf.Tensor4D`.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  as4D(rows, columns, depth, depth2) {\n    this.throwIfDisposed();\n    return this.reshape([rows, columns, depth, depth2]);\n  }\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor5D`.\n   *\n   * @param rows Number of rows in `tf.Tensor5D`.\n   * @param columns Number of columns in `tf.Tensor5D`.\n   * @param depth Depth of `tf.Tensor5D`.\n   * @param depth2 4th dimension of `tf.Tensor5D`.\n   * @param depth3 5th dimension of 'tf.Tensor5D'\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  as5D(rows, columns, depth, depth2, depth3) {\n    this.throwIfDisposed();\n    return this.reshape([rows, columns, depth, depth2, depth3]);\n  }\n  /**\n   * Casts a `tf.Tensor` to a specified dtype.\n   *\n   * @param dtype Data-type to cast the tensor to.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  asType(dtype) {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  async buffer() {\n    const vals = await this.data();\n    return opHandler.buffer(this.shape, this.dtype, vals);\n  }\n  /** Returns a `tf.TensorBuffer` that holds the underlying data. */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  bufferSync() {\n    return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n  }\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  async array() {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals);\n  }\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  arraySync() {\n    return toNestedArray(this.shape, this.dataSync());\n  }\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  async data() {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n\n    if (this.dtype === 'string') {\n      const bytes = await data;\n\n      try {\n        return bytes.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  dataSync() {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n\n    if (this.dtype === 'string') {\n      try {\n        return data.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n\n    return data;\n  }\n  /** Returns the underlying bytes of the tensor's data. */\n\n\n  async bytes() {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n\n    if (this.dtype === 'string') {\n      return data;\n    } else {\n      return new Uint8Array(data.buffer);\n    }\n  }\n  /**\n   * Disposes `tf.Tensor` from memory.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  get isDisposed() {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n  /** Casts the array to type `float32` */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  toFloat() {\n    return this.asType('float32');\n  }\n  /** Casts the array to type `int32` */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  toInt() {\n    return this.asType('int32');\n  }\n  /** Casts the array to type `bool` */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  toBool() {\n    return this.asType('bool');\n  }\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  print(verbose = false) {\n    return opHandler.print(this, verbose);\n  }\n  /**\n   * Reshapes the tensor into the provided shape.\n   * See `tf.reshape` for more details.\n   *\n   * @param newShape An array of integers defining the output tensor shape.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  reshape(newShape) {\n    this.throwIfDisposed();\n    return opHandler.reshape(this, newShape);\n  }\n  /**\n   * Reshapes the tensor into the shape of the provided tensor.\n   *\n   * @param x The tensor of required shape.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  reshapeAs(x) {\n    this.throwIfDisposed();\n    return this.reshape(x.shape);\n  }\n  /**\n   * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n   * into the tensor's shape. See `tf.expandDims` for details.\n   *\n   * @param axis The dimension index at which to insert shape of 1. Defaults to\n   *     0 (the first dimension).\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  expandDims(axis = 0) {\n    return opHandler.expandDims(this, axis);\n  }\n  /**\n   * Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.\n   * See `tf.squeeze` for more details.\n   *\n   * @param axis A list of numbers. If specified, only squeezes the\n   *    dimensions listed. The dimension index starts at 0. It is an error to\n   *    squeeze a dimension that is not 1.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  squeeze(axis) {\n    this.throwIfDisposed();\n    return opHandler.squeeze(this, axis);\n  }\n  /** Returns a copy of the tensor. See `tf.clone` for details. */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  clone() {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  toString(verbose = false) {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  } // Below is chain API that is not exposed to docs to avoid repetition. To\n  // expose a method, move it above this comment and add @doc and jsdoc.\n\n\n  gather(indices, axis = 0) {\n    this.throwIfDisposed();\n    return opHandler.gather(this, indices, axis);\n  }\n\n  norm(ord = 'euclidean', axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.norm(this, ord, axis, keepDims);\n  }\n\n  slice(begin, size) {\n    this.throwIfDisposed();\n    return opHandler.slice(this, begin, size);\n  }\n\n  reverse(axis) {\n    this.throwIfDisposed();\n    return opHandler.reverse(this, axis);\n  }\n\n  stack(x, axis = 0) {\n    return opHandler.stack([this, x], axis);\n  }\n\n  unstack(axis = 0) {\n    return opHandler.unstack(this, axis);\n  } // Reduction ops.\n\n\n  all(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.all(this, axis, keepDims);\n  }\n\n  any(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.any(this, axis, keepDims);\n  }\n\n  logSumExp(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.logSumExp(this, axis, keepDims);\n  }\n\n  sum(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.sum(this, axis, keepDims);\n  }\n\n  prod(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.prod(this, axis, keepDims);\n  }\n\n  mean(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.mean(this, axis, keepDims);\n  }\n\n  min(axis = null, keepDims = false) {\n    this.throwIfDisposed();\n    return opHandler.min(this, axis, keepDims);\n  }\n\n  argMin(axis = null) {\n    this.throwIfDisposed();\n    return opHandler.argMin(this, axis);\n  }\n\n  argMax(axis = null) {\n    this.throwIfDisposed();\n    return opHandler.argMax(this, axis);\n  } // Transformations\n\n\n  cast(dtype) {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  } // Binary ops.\n\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  addStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.addStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  subStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.subStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  powStrict(exp) {\n    this.throwIfDisposed();\n    return opHandler.powStrict(this, exp);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  mulStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.mulStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  divStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.divStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  minimumStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.minimumStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  maximumStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.maximumStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  modStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.modStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  squaredDifferenceStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.squaredDifferenceStrict(this, x);\n  } // Compare ops.\n\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  notEqualStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.notEqualStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  lessStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.lessStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  equalStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.equalStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  lessEqualStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.lessEqualStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  greaterStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.greaterStrict(this, x);\n  }\n  /**\n   * @deprecated strict variants of ops have been deprecated\n   */\n\n\n  greaterEqualStrict(x) {\n    this.throwIfDisposed();\n    return opHandler.greaterEqualStrict(this, x);\n  } // Compare ops.\n\n\n  logicalAnd(x) {\n    this.throwIfDisposed();\n    return opHandler.logicalAnd(this, x);\n  }\n\n  logicalOr(x) {\n    this.throwIfDisposed();\n    return opHandler.logicalOr(this, x);\n  }\n\n  logicalNot() {\n    this.throwIfDisposed();\n    return opHandler.logicalNot(this);\n  }\n\n  logicalXor(x) {\n    this.throwIfDisposed();\n    return opHandler.logicalXor(this, x);\n  }\n\n  where(condition, x) {\n    this.throwIfDisposed();\n    return opHandler.where(condition, this, x);\n  } // Unary ops.\n\n\n  neg() {\n    this.throwIfDisposed();\n    return opHandler.neg(this);\n  }\n\n  ceil() {\n    this.throwIfDisposed();\n    return opHandler.ceil(this);\n  }\n\n  floor() {\n    this.throwIfDisposed();\n    return opHandler.floor(this);\n  }\n\n  sign() {\n    this.throwIfDisposed();\n    return opHandler.sign(this);\n  }\n\n  isNaN() {\n    this.throwIfDisposed();\n    return opHandler.isNaN(this);\n  }\n\n  isInf() {\n    this.throwIfDisposed();\n    return opHandler.isInf(this);\n  }\n\n  isFinite() {\n    this.throwIfDisposed();\n    return opHandler.isFinite(this);\n  }\n\n  exp() {\n    this.throwIfDisposed();\n    return opHandler.exp(this);\n  }\n\n  expm1() {\n    this.throwIfDisposed();\n    return opHandler.expm1(this);\n  }\n\n  log() {\n    this.throwIfDisposed();\n    return opHandler.log(this);\n  }\n\n  log1p() {\n    this.throwIfDisposed();\n    return opHandler.log1p(this);\n  }\n\n  sqrt() {\n    this.throwIfDisposed();\n    return opHandler.sqrt(this);\n  }\n\n  rsqrt() {\n    this.throwIfDisposed();\n    return opHandler.rsqrt(this);\n  }\n\n  square() {\n    this.throwIfDisposed();\n    return opHandler.square(this);\n  }\n\n  reciprocal() {\n    this.throwIfDisposed();\n    return opHandler.reciprocal(this);\n  }\n\n  abs() {\n    this.throwIfDisposed();\n    return opHandler.abs(this);\n  }\n\n  clipByValue(min, max) {\n    this.throwIfDisposed();\n    return opHandler.clipByValue(this, min, max);\n  }\n\n  sigmoid() {\n    this.throwIfDisposed();\n    return opHandler.sigmoid(this);\n  }\n\n  logSigmoid() {\n    this.throwIfDisposed();\n    return opHandler.logSigmoid(this);\n  }\n\n  softplus() {\n    this.throwIfDisposed();\n    return opHandler.softplus(this);\n  }\n\n  zerosLike() {\n    this.throwIfDisposed();\n    return opHandler.zerosLike(this);\n  }\n\n  onesLike() {\n    this.throwIfDisposed();\n    return opHandler.onesLike(this);\n  }\n\n  sin() {\n    this.throwIfDisposed();\n    return opHandler.sin(this);\n  }\n\n  cos() {\n    this.throwIfDisposed();\n    return opHandler.cos(this);\n  }\n\n  tan() {\n    this.throwIfDisposed();\n    return opHandler.tan(this);\n  }\n\n  asin() {\n    this.throwIfDisposed();\n    return opHandler.asin(this);\n  }\n\n  acos() {\n    this.throwIfDisposed();\n    return opHandler.acos(this);\n  }\n\n  atan() {\n    this.throwIfDisposed();\n    return opHandler.atan(this);\n  }\n\n  sinh() {\n    this.throwIfDisposed();\n    return opHandler.sinh(this);\n  }\n\n  cosh() {\n    this.throwIfDisposed();\n    return opHandler.cosh(this);\n  }\n\n  tanh() {\n    this.throwIfDisposed();\n    return opHandler.tanh(this);\n  }\n\n  asinh() {\n    this.throwIfDisposed();\n    return opHandler.asinh(this);\n  }\n\n  acosh() {\n    this.throwIfDisposed();\n    return opHandler.acosh(this);\n  }\n\n  atanh() {\n    this.throwIfDisposed();\n    return opHandler.atanh(this);\n  }\n\n  erf() {\n    this.throwIfDisposed();\n    return opHandler.erf(this);\n  }\n\n  round() {\n    this.throwIfDisposed();\n    return opHandler.round(this);\n  }\n\n  step(alpha = 0.0) {\n    this.throwIfDisposed();\n    return opHandler.step(this, alpha);\n  }\n\n  softmax(dim = -1) {\n    this.throwIfDisposed();\n    return opHandler.softmax(this, dim);\n  }\n\n  logSoftmax(axis = -1) {\n    this.throwIfDisposed();\n    return opHandler.logSoftmax(this, axis);\n  } // Image ops.\n\n\n  resizeBilinear(newShape2D, alignCorners = false) {\n    this.throwIfDisposed();\n    return opHandler.image.resizeBilinear(this, newShape2D, alignCorners);\n  }\n\n  resizeNearestNeighbor(newShape2D, alignCorners = false) {\n    this.throwIfDisposed();\n    return opHandler.image.resizeNearestNeighbor(this, newShape2D, alignCorners);\n  } // Pooling.\n\n\n  variable(trainable = true, name, dtype) {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype);\n  }\n\n  unsortedSegmentSum(segmentIds, numSegments) {\n    this.throwIfDisposed();\n    return opHandler.unsortedSegmentSum(this, segmentIds, numSegments);\n  }\n\n  topk(k = 1, sorted = true) {\n    this.throwIfDisposed();\n    return opHandler.topk(this, k, sorted);\n  }\n\n  stridedSlice(begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {\n    this.throwIfDisposed();\n    return opHandler.stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  }\n\n  fft() {\n    this.throwIfDisposed();\n    return opHandler.spectral.fft(this);\n  }\n\n  ifft() {\n    this.throwIfDisposed();\n    return opHandler.spectral.ifft(this);\n  }\n\n  rfft() {\n    this.throwIfDisposed();\n    return opHandler.spectral.rfft(this);\n  }\n\n  irfft() {\n    this.throwIfDisposed();\n    return opHandler.spectral.irfft(this);\n  }\n\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: instance => {\n    return !!instance && instance.dataId != null && instance.shape != null && instance.dtype != null;\n  }\n});\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\nexport class Variable extends Tensor {\n  constructor(initialValue, trainable, name, tensorId) {\n    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.trainable = trainable;\n    this.name = name;\n  }\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   */\n\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n\n\n  assign(newValue) {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);\n    }\n\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);\n    }\n\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null\n    /* backend */\n    );\n  }\n\n  dispose() {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: instance => {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":{"version":3,"sources":["../src/tensor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,cAAR,QAA6B,iBAA7B;AAEA,OAAO,KAAK,IAAZ,MAAsB,QAAtB;AACA,SAAQ,cAAR,EAAwB,aAAxB,QAA4C,QAA5C;AAWA;;;;;;;AAMA;;AACA,OAAM,MAAO,YAAP,CAAmB;AAMvB,EAAA,WAAA,CAAY,KAAZ,EAAuC,KAAvC,EAAiD,MAAjD,EAAwE;AAAjC,SAAA,KAAA,GAAA,KAAA;AACrC,SAAK,KAAL,GAAa,KAAK,CAAC,KAAN,EAAb;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,aAAL,CAAmB,KAAnB,CAAZ;;AAEA,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAM,CAAC,GAAG,MAAM,CAAC,MAAjB;AACA,MAAA,IAAI,CAAC,MAAL,CACI,CAAC,KAAK,KAAK,IADf,EAEI,MAAM,qBAAqB,CAAC,4BAAtB,GACF,0BAA0B,KAAK,IAAI,IAH3C;AAID;;AACD,QAAI,KAAK,KAAK,WAAd,EAA2B;AACzB,YAAM,IAAI,KAAJ,CACF,iEAAA,GACA,iEADA,GAEA,8BAHE,CAAN;AAID;;AACD,SAAK,MAAL,GAAc,MAAM,IAAI,IAAI,CAAC,iBAAL,CAAuB,KAAvB,EAA8B,KAAK,IAAnC,CAAxB;AACA,SAAK,OAAL,GAAe,cAAc,CAAC,KAAD,CAA7B;AACD;AAED;;;;;;;AAMA;;;AACA,EAAA,GAAG,CAAC,KAAD,EAA2B,GAAG,IAA9B,EAA4C;AAC7C,QAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,MAAA,IAAI,GAAG,CAAC,CAAD,CAAP;AACD;;AACD,IAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,MAAL,KAAgB,KAAK,IADzB,EAEI,MAAM,uCAAuC,IAAI,CAAC,MAAM,SAAlD,GACF,mBAAmB,KAAK,IAAI,GAHpC;AAKA,UAAM,KAAK,GAAG,KAAK,UAAL,CAAgB,IAAhB,CAAd;AACA,SAAK,MAAL,CAAY,KAAZ,IAAqB,KAArB;AACD;AAED;;;;;;AAKA;;;AACA,EAAA,GAAG,CAAC,GAAG,IAAJ,EAAkB;AACnB,QAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,MAAA,IAAI,GAAG,CAAC,CAAD,CAAP;AACD;;AACD,QAAI,CAAC,GAAG,CAAR;;AACA,SAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,UAAI,GAAG,GAAG,CAAN,IAAW,GAAG,IAAI,KAAK,KAAL,CAAW,CAAX,CAAtB,EAAqC;AACnC,cAAM,GAAG,GAAG,qCAAqC,IAAI,IAAzC,GACR,kBAAkB,KAAK,KAAK,EADhC;AAEA,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;;AACD,MAAA,CAAC;AACF;;AACD,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAhB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAAlC,EAAqC,EAAE,CAAvC,EAA0C;AACxC,MAAA,KAAK,IAAI,KAAK,OAAL,CAAa,CAAb,IAAkB,IAAI,CAAC,CAAD,CAA/B;AACD;;AACD,WAAO,KAAK,MAAL,CAAY,KAAZ,CAAP;AACD;;AAED,EAAA,UAAU,CAAC,IAAD,EAAe;AACvB,QAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,aAAO,IAAI,CAAC,CAAD,CAAX;AACD;;AACD,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAhB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAAlC,EAAqC,EAAE,CAAvC,EAA0C;AACxC,MAAA,KAAK,IAAI,KAAK,OAAL,CAAa,CAAb,IAAkB,IAAI,CAAC,CAAD,CAA/B;AACD;;AACD,WAAO,KAAP;AACD;;AAED,EAAA,UAAU,CAAC,KAAD,EAAc;AACtB,QAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AACnB,aAAO,EAAP;AACD,KAFD,MAEO,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,aAAO,CAAC,KAAD,CAAP;AACD;;AACD,UAAM,IAAI,GAAa,IAAI,KAAJ,CAAU,KAAK,KAAL,CAAW,MAArB,CAAvB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAAlC,EAAqC,EAAE,CAAvC,EAA0C;AACxC,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,KAAK,OAAL,CAAa,CAAb,CAAnB,CAAV;AACA,MAAA,KAAK,IAAI,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAK,OAAL,CAAa,CAAb,CAAnB;AACD;;AACD,IAAA,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAJ,GAAwB,KAAxB;AACA,WAAO,IAAP;AACD;;AAED,MAAI,IAAJ,GAAQ;AACN,WAAO,KAAK,KAAL,CAAW,MAAlB;AACD;AAED;;;;AAGA;;;AACA,EAAA,QAAQ,GAAA;AACN,WAAO,SAAS,GAAG,UAAZ,CAAuB,KAAK,MAA5B,EAAoC,KAAK,KAAzC,EAAgD,KAAK,KAArD,CAAP;AAED;;AAhHsB,C,CAoPzB;;AACA,IAAI,SAAS,GAAwB,IAArC,C,CACA;;AACA,IAAI,SAAS,GAAc,IAA3B,C,CACA;;AACA,IAAI,oBAAoB,GAA0B,IAAlD,C,CACA;AACA;AACA;;AACA,CAAC,oBAAD;AAEA;;;;;;AAKA,OAAM,SAAU,gBAAV,CAA2B,EAA3B,EAAkD;AACtD,EAAA,SAAS,GAAG,EAAZ;AACD;AAED;;;;;;AAKA,OAAM,SAAU,YAAV,CAAuB,OAAvB,EAAyC;AAC7C,EAAA,SAAS,GAAG,OAAZ;AACD;AAED;;;;;AAIA,OAAM,SAAU,uBAAV,CAAkC,EAAlC,EAA2D;AAC/D,EAAA,oBAAoB,GAAG,EAAvB;AACD;AAcD;;;;;;;AAMA;;AACA,OAAM,MAAO,MAAP,CAAa;AA6BjB,EAAA,WAAA,CAAY,KAAZ,EAAgC,KAAhC,EAAiD,MAAjD,EAAiE,EAAjE,EAA2E;AAZ3E;AACA,SAAA,IAAA,GAAO,KAAP;AAqNU,SAAA,kBAAA,GAAqB,KAArB;AAzMR,SAAK,KAAL,GAAa,KAAK,CAAC,KAAN,EAAb;AACA,SAAK,KAAL,GAAa,KAAK,IAAI,SAAtB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,aAAL,CAAmB,KAAnB,CAAZ;AACA,SAAK,OAAL,GAAe,cAAc,CAAC,KAAD,CAA7B;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,EAAL,GAAU,EAAV;AACA,SAAK,QAAL,GAAiB,KAAK,IAAL,GAAY,CAAZ,GAAgB,KAAK,IAAL,CAAU,QAAV,EAAhB,GAAuC,QAAxD;AACD;AAED;;AACA;;;AACA,EAAA,OAAO,GAAA;AACL,SAAK,eAAL;AACA,WAAO,KAAK,IAAL,EAAP;AACD;AAED;;AACA;;;AACA,EAAA,QAAQ,GAAA;AACN,SAAK,eAAL;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,KAAK,IAAL,KAAc,CAA1B,EAA6B,MAAM,qCAAnC;AACA,WAAO,KAAK,OAAL,CAAsB,EAAtB,CAAP;AACD;AAED;;AACA;;;AACA,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,KAAK,OAAL,CAAsB,CAAC,KAAK,IAAN,CAAtB,CAAP;AACD;AAED;;;;;;;AAMA;;;AACA,EAAA,IAAI,CAAC,IAAD,EAAe,OAAf,EAA8B;AAChC,SAAK,eAAL;AACA,WAAO,KAAK,OAAL,CAAsB,CAAC,IAAD,EAAO,OAAP,CAAtB,CAAP;AACD;AAED;;;;;;;;AAOA;;;AACA,EAAA,IAAI,CAAC,IAAD,EAAe,OAAf,EAAgC,KAAhC,EAA6C;AAC/C,SAAK,eAAL;AACA,WAAO,KAAK,OAAL,CAAsB,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAhB,CAAtB,CAAP;AACD;AAED;;;;;;;;;AAQA;;;AACA,EAAA,IAAI,CAAC,IAAD,EAAe,OAAf,EAAgC,KAAhC,EAA+C,MAA/C,EAA6D;AAC/D,SAAK,eAAL;AACA,WAAO,KAAK,OAAL,CAAsB,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAhB,EAAuB,MAAvB,CAAtB,CAAP;AACD;AAED;;;;;;;;;;AASA;;;AACA,EAAA,IAAI,CACA,IADA,EACc,OADd,EAC+B,KAD/B,EAC8C,MAD9C,EAEA,MAFA,EAEc;AAChB,SAAK,eAAL;AACA,WAAO,KAAK,OAAL,CAAsB,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,MAA/B,CAAtB,CAAP;AACD;AAED;;;;;;AAKA;;;AACA,EAAA,MAAM,CAA0B,KAA1B,EAAyC;AAC7C,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,KAArB,CAAP;AACD;;AAED,MAAI,IAAJ,GAAQ;AACN,WAAO,KAAK,KAAL,CAAW,MAAlB;AACD;AAED;;;;AAGA;;;AACA,QAAM,MAAN,GAAY;AACV,UAAM,IAAI,GAAG,MAAM,KAAK,IAAL,EAAnB;AACA,WAAO,SAAS,CAAC,MAAV,CAAiB,KAAK,KAAtB,EAA6B,KAAK,KAAlC,EAA8C,IAA9C,CAAP;AACD;AAED;;AACA;;;AACA,EAAA,UAAU,GAAA;AACR,WAAO,SAAS,CAAC,MAAV,CAAiB,KAAK,KAAtB,EAA6B,KAAK,KAAlC,EAA8C,KAAK,QAAL,EAA9C,CAAP;AACD;AAED;;;;;AAIA;;;AACA,QAAM,KAAN,GAAW;AACT,UAAM,IAAI,GAAG,MAAM,KAAK,IAAL,EAAnB;AACA,WAAO,aAAa,CAAC,KAAK,KAAN,EAAa,IAAb,CAApB;AACD;AAED;;;;;AAIA;;;AACA,EAAA,SAAS,GAAA;AACP,WAAO,aAAa,CAAC,KAAK,KAAN,EAAa,KAAK,QAAL,EAAb,CAApB;AACD;AAED;;;;;AAIA;;;AACA,QAAM,IAAN,GAAU;AACR,SAAK,eAAL;AACA,UAAM,IAAI,GAAG,SAAS,GAAG,IAAZ,CAAiB,KAAK,MAAtB,CAAb;;AACA,QAAI,KAAK,KAAL,KAAe,QAAnB,EAA6B;AAC3B,YAAM,KAAK,GAAG,MAAM,IAApB;;AACA,UAAI;AACF,eAAO,KAAK,CAAC,GAAN,CAAU,CAAC,IAAI,IAAI,CAAC,YAAL,CAAkB,CAAlB,CAAf,CAAP;AACD,OAFD,CAEE,OAAA,EAAA,EAAM;AACN,cAAM,IAAI,KAAJ,CACF,mDACA,iDAFE,CAAN;AAGD;AACF;;AACD,WAAO,IAAP;AACD;AAED;;;;;AAIA;;;AACA,EAAA,QAAQ,GAAA;AACN,SAAK,eAAL;AACA,UAAM,IAAI,GAAG,SAAS,GAAG,QAAZ,CAAqB,KAAK,MAA1B,CAAb;;AACA,QAAI,KAAK,KAAL,KAAe,QAAnB,EAA6B;AAC3B,UAAI;AACF,eAAQ,IAAqB,CAAC,GAAtB,CAA0B,CAAC,IAAI,IAAI,CAAC,YAAL,CAAkB,CAAlB,CAA/B,CAAR;AAED,OAHD,CAGE,OAAA,EAAA,EAAM;AACN,cAAM,IAAI,KAAJ,CACF,mDACA,iDAFE,CAAN;AAGD;AACF;;AACD,WAAO,IAAP;AACD;AAED;;;AACA,QAAM,KAAN,GAAW;AACT,SAAK,eAAL;AACA,UAAM,IAAI,GAAG,MAAM,SAAS,GAAG,IAAZ,CAAiB,KAAK,MAAtB,CAAnB;;AACA,QAAI,KAAK,KAAL,KAAe,QAAnB,EAA6B;AAC3B,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAI,UAAJ,CAAgB,IAAmB,CAAC,MAApC,CAAP;AACD;AACF;AAED;;;;AAGA;;;AACA,EAAA,OAAO,GAAA;AACL,QAAI,KAAK,UAAT,EAAqB;AACnB;AACD;;AACD,IAAA,SAAS,GAAG,aAAZ,CAA0B,IAA1B;AACA,SAAK,kBAAL,GAA0B,IAA1B;AACD;;AAGD,MAAI,UAAJ,GAAc;AACZ,WAAO,KAAK,kBAAZ;AACD;;AAED,EAAA,eAAe,GAAA;AACb,QAAI,KAAK,UAAT,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF;AAED;;AACA;;;AACA,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,MAAL,CAAY,SAAZ,CAAP;AACD;AAED;;AACA;;;AACA,EAAA,KAAK,GAAA;AACH,WAAO,KAAK,MAAL,CAAY,OAAZ,CAAP;AACD;AAED;;AACA;;;AACA,EAAA,MAAM,GAAA;AACJ,WAAO,KAAK,MAAL,CAAY,MAAZ,CAAP;AACD;AAED;;;;;;;AAMA;;;AACA,EAAA,KAAK,CAAC,OAAO,GAAG,KAAX,EAAgB;AACnB,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,EAAsB,OAAtB,CAAP;AACD;AAED;;;;;;;AAMA;;;AACA,EAAA,OAAO,CAAkB,QAAlB,EAAwC;AAC7C,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAAwB,QAAxB,CAAP;AACD;AAED;;;;;;AAKA;;;AACA,EAAA,SAAS,CAAmB,CAAnB,EAAuB;AAC9B,SAAK,eAAL;AACA,WAAO,KAAK,OAAL,CAAa,CAAC,CAAC,KAAf,CAAP;AACD;AAED;;;;;;;;AAOA;;;AACA,EAAA,UAAU,CAAkB,IAAI,GAAG,CAAzB,EAA0B;AAClC,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,IAA3B,CAAP;AACD;AAED;;;;;;;;;AAQA;;;AACA,EAAA,OAAO,CAAmB,IAAnB,EAAkC;AACvC,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAAwB,IAAxB,CAAP;AACD;AAED;;AACA;;;AACA,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;AAED;;;;AAGA;;;AACA,EAAA,QAAQ,CAAC,OAAO,GAAG,KAAX,EAAgB;AACtB,UAAM,IAAI,GAAG,KAAK,QAAL,EAAb;AACA,WAAO,cAAc,CAAC,IAAD,EAAO,KAAK,KAAZ,EAAmB,KAAK,KAAxB,EAA+B,OAA/B,CAArB;AACD,GA9UgB,CAgVjB;AACA;;;AAEA,EAAA,MAAM,CAA0B,OAA1B,EAAsD,IAAI,GAAG,CAA7D,EAA8D;AAClE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,OAAvB,EAAgC,IAAhC,CAAP;AACD;;AACD,EAAA,IAAI,CACA,GAAA,GAAgC,WADhC,EAC6C,IAAA,GAAwB,IADrE,EAEA,QAAQ,GAAG,KAFX,EAEgB;AAClB,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,GAArB,EAA0B,IAA1B,EAAgC,QAAhC,CAAP;AACD;;AACD,EAAA,KAAK,CACQ,KADR,EACgC,IADhC,EACsD;AACzD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,IAA7B,CAAP;AACD;;AACD,EAAA,OAAO,CAA4B,IAA5B,EAAkD;AACvD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAAwB,IAAxB,CAAP;AACD;;AACD,EAAA,KAAK,CAAC,CAAD,EAAY,IAAI,GAAG,CAAnB,EAAoB;AACvB,WAAO,SAAS,CAAC,KAAV,CAAgB,CAAC,IAAD,EAAO,CAAP,CAAhB,EAA2B,IAA3B,CAAP;AACD;;AACD,EAAA,OAAO,CAAC,IAAI,GAAG,CAAR,EAAS;AACd,WAAO,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAAwB,IAAxB,CAAP;AACD,GA3WgB,CA4WjB;;;AACA,EAAA,GAAG,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AAClE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,EAAoB,IAApB,EAA0B,QAA1B,CAAP;AACD;;AACD,EAAA,GAAG,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AAClE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,EAAoB,IAApB,EAA0B,QAA1B,CAAP;AACD;;AACD,EAAA,SAAS,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AAExE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,IAA1B,EAAgC,QAAhC,CAAP;AACD;;AACD,EAAA,GAAG,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AAClE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,EAAoB,IAApB,EAA0B,QAA1B,CAAP;AACD;;AACD,EAAA,IAAI,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AACnE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,QAA3B,CAAP;AACD;;AACD,EAAA,IAAI,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AACnE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,QAA3B,CAAP;AACD;;AACD,EAAA,GAAG,CAAmB,IAAA,GAAwB,IAA3C,EAAiD,QAAQ,GAAG,KAA5D,EAAiE;AAClE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,EAAoB,IAApB,EAA0B,QAA1B,CAAP;AACD;;AACD,EAAA,MAAM,CAAmB,IAAA,GAAe,IAAlC,EAAsC;AAC1C,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,IAAvB,CAAP;AACD;;AACD,EAAA,MAAM,CAAmB,IAAA,GAAe,IAAlC,EAAsC;AAC1C,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,IAAvB,CAAP;AACD,GAjZgB,CAmZjB;;;AACA,EAAA,IAAI,CAAiB,KAAjB,EAAgC;AAClC,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAA0B,KAA1B,CAAP;AACD,GAvZgB,CAyZjB;;AACA;;;;;AAGA,EAAA,SAAS,CAA0B,CAA1B,EAAyC;AAChD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,CAA1B,CAAP;AACD;AACD;;;;;AAGA,EAAA,SAAS,CAA0B,CAA1B,EAAyC;AAChD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,CAA1B,CAAP;AACD;AACD;;;;;AAGA,EAAA,SAAS,CAAC,GAAD,EAAuB;AAC9B,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,GAA1B,CAAP;AACD;AACD;;;;;AAGA,EAAA,SAAS,CAA0B,CAA1B,EAAyC;AAChD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,CAA1B,CAAP;AACD;AACD;;;;;AAGA,EAAA,SAAS,CAA0B,CAA1B,EAAyC;AAChD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,CAA1B,CAAP;AACD;AACD;;;;;AAGA,EAAA,aAAa,CAA0B,CAA1B,EAAyC;AACpD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,aAAV,CAAwB,IAAxB,EAA8B,CAA9B,CAAP;AACD;AACD;;;;;AAGA,EAAA,aAAa,CAA0B,CAA1B,EAAyC;AACpD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,aAAV,CAAwB,IAAxB,EAA8B,CAA9B,CAAP;AACD;AACD;;;;;AAGA,EAAA,SAAS,CAA0B,CAA1B,EAAyC;AAChD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,CAA1B,CAAP;AACD;AACD;;;;;AAGA,EAAA,uBAAuB,CAA0B,CAA1B,EAAyC;AAC9D,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,uBAAV,CAAkC,IAAlC,EAAwC,CAAxC,CAAP;AACD,GAxdgB,CA0djB;;AACA;;;;;AAGA,EAAA,cAAc,CAA0B,CAA1B,EAAyC;AACrD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,cAAV,CAAyB,IAAzB,EAA+B,CAA/B,CAAP;AACD;AACD;;;;;AAGA,EAAA,UAAU,CAA0B,CAA1B,EAAyC;AACjD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;AACD;;;;;AAGA,EAAA,WAAW,CAA0B,CAA1B,EAAyC;AAClD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,WAAV,CAAsB,IAAtB,EAA4B,CAA5B,CAAP;AACD;AACD;;;;;AAGA,EAAA,eAAe,CAA0B,CAA1B,EAAyC;AACtD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,eAAV,CAA0B,IAA1B,EAAgC,CAAhC,CAAP;AACD;AACD;;;;;AAGA,EAAA,aAAa,CAA0B,CAA1B,EAAyC;AACpD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,aAAV,CAAwB,IAAxB,EAA8B,CAA9B,CAAP;AACD;AACD;;;;;AAGA,EAAA,kBAAkB,CAA0B,CAA1B,EAAyC;AACzD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,kBAAV,CAA6B,IAA7B,EAAmC,CAAnC,CAAP;AACD,GApgBgB,CAsgBjB;;;AACA,EAAA,UAAU,CAAC,CAAD,EAAqB;AAC7B,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;;AACD,EAAA,SAAS,CAAC,CAAD,EAAqB;AAC5B,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,CAA1B,CAAP;AACD;;AACD,EAAA,UAAU,GAAA;AACR,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,CAAP;AACD;;AACD,EAAA,UAAU,CAAC,CAAD,EAAqB;AAC7B,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;;AACD,EAAA,KAAK,CAAC,SAAD,EAA+B,CAA/B,EAAmD;AACtD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,SAAhB,EAA2B,IAA3B,EAAiC,CAAjC,CAAP;AACD,GA1hBgB,CA4hBjB;;;AACA,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,QAAQ,GAAA;AACN,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,MAAM,GAAA;AACJ,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,MAAV,CAAiB,IAAjB,CAAP;AACD;;AACD,EAAA,UAAU,GAAA;AACR,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,WAAW,CAAC,GAAD,EAAc,GAAd,EAAyB;AAClC,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,WAAV,CAAsB,IAAtB,EAA4B,GAA5B,EAAiC,GAAjC,CAAP;AACD;;AACD,EAAA,OAAO,GAAA;AACL,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAP;AACD;;AACD,EAAA,UAAU,GAAA;AACR,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,CAAP;AACD;;AACD,EAAA,QAAQ,GAAA;AACN,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAP;AACD;;AACD,EAAA,SAAS,GAAA;AACP,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,SAAV,CAAoB,IAApB,CAAP;AACD;;AACD,EAAA,QAAQ,GAAA;AACN,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,IAAd,CAAP;AACD;;AACD,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD;;AACD,EAAA,IAAI,CAA4B,KAAK,GAAG,GAApC,EAAuC;AACzC,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,KAArB,CAAP;AACD;;AACD,EAAA,OAAO,CAA0B,GAAG,GAAG,CAAC,CAAjC,EAAkC;AACvC,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,CAAP;AACD;;AACD,EAAA,UAAU,CAA0B,IAAI,GAAG,CAAC,CAAlC,EAAmC;AAC3C,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,IAA3B,CAAP;AACD,GAxrBgB,CA0rBjB;;;AACA,EAAA,cAAc,CACD,UADC,EAC6B,YAAY,GAAG,KAD5C,EACiD;AAC5D,SAAgB,eAAhB;AACD,WAAO,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAA+B,IAA/B,EAAqC,UAArC,EAAiD,YAAjD,CAAP;AACD;;AAED,EAAA,qBAAqB,CACR,UADQ,EACsB,YAAY,GAAG,KADrC,EAC0C;AAC5D,SAAgB,eAAhB;AACD,WAAO,SAAS,CAAC,KAAV,CAAgB,qBAAhB,CACH,IADG,EACG,UADH,EACe,YADf,CAAP;AAED,GAtsBgB,CAwsBjB;;;AACA,EAAA,QAAQ,CAAC,SAAS,GAAG,IAAb,EAAmB,IAAnB,EAAkC,KAAlC,EAAkD;AACxD,SAAK,eAAL;AACA,WAAO,SAAS,GAAG,YAAZ,CAAyB,IAAzB,EAA+B,SAA/B,EAA0C,IAA1C,EAAgD,KAAhD,CAAP;AAED;;AAED,EAAA,kBAAkB,CACL,UADK,EAC8B,WAD9B,EACiD;AACjE,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,kBAAV,CAA6B,IAA7B,EAAmC,UAAnC,EAA+C,WAA/C,CAAP;AACD;;AAED,EAAA,IAAI,CAA4B,CAAC,GAAG,CAAhC,EAAmC,MAAM,GAAG,IAA5C,EAAgD;AAElD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,CAArB,EAAwB,MAAxB,CAAP;AACD;;AAED,EAAA,YAAY,CACM,KADN,EACuB,GADvB,EACsC,OADtC,EAER,SAAS,GAAG,CAFJ,EAEO,OAAO,GAAG,CAFjB,EAEoB,YAAY,GAAG,CAFnC,EAEsC,WAAW,GAAG,CAFpD,EAGR,cAAc,GAAG,CAHT,EAGU;AACpB,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,YAAV,CACH,IADG,EACG,KADH,EACU,GADV,EACe,OADf,EACwB,SADxB,EACmC,OADnC,EAC4C,YAD5C,EAEH,WAFG,EAEU,cAFV,CAAP;AAGD;;AAED,EAAA,GAAG,GAAA;AACD,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,GAAnB,CAAuB,IAAvB,CAAP;AACD;;AAED,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,CAAP;AACD;;AAED,EAAA,IAAI,GAAA;AACF,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,CAAP;AACD;;AAED,EAAA,KAAK,GAAA;AACH,SAAK,eAAL;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAyB,IAAzB,CAAP;AACD;;AAvvBgB;AAyvBnB,MAAM,CAAC,cAAP,CAAsB,MAAtB,EAA8B,MAAM,CAAC,WAArC,EAAkD;AAChD,EAAA,KAAK,EAAG,QAAD,IAAqB;AAC1B,WAAO,CAAC,CAAC,QAAF,IAAc,QAAQ,CAAC,MAAT,IAAmB,IAAjC,IAAyC,QAAQ,CAAC,KAAT,IAAkB,IAA3D,IACH,QAAQ,CAAC,KAAT,IAAkB,IADtB;AAED;AAJ+C,CAAlD;AAkCA;;;;AAGA;;AACA,OAAM,MAAO,QAAP,SAA+C,MAA/C,CAAwD;AAG5D,EAAA,WAAA,CACI,YADJ,EACoC,SADpC,EACwD,IADxD,EAEI,QAFJ,EAEoB;AAClB,UACI,YAAY,CAAC,KADjB,EACwB,YAAY,CAAC,KADrC,EAC4C,YAAY,CAAC,MADzD,EACiE,QADjE;AAFkC,SAAA,SAAA,GAAA,SAAA;AAIlC,SAAK,IAAL,GAAY,IAAZ;AACD;AAED;;;;;;;AAMA;;;AACA,EAAA,MAAM,CAAC,QAAD,EAAoB;AACxB,QAAI,QAAQ,CAAC,KAAT,KAAmB,KAAK,KAA5B,EAAmC;AACjC,YAAM,IAAI,KAAJ,CACF,2BAA2B,QAAQ,CAAC,KAAK,QAAzC,GACA,mBAAmB,KAAK,KAAK,cAF3B,CAAN;AAGD;;AACD,QAAI,CAAC,IAAI,CAAC,WAAL,CAAiB,QAAQ,CAAC,KAA1B,EAAiC,KAAK,KAAtC,CAAL,EAAmD;AACjD,YAAM,IAAI,KAAJ,CACF,2BAA2B,QAAQ,CAAC,KAAK,QAAzC,GACA,mBAAmB,KAAK,KAAK,cAF3B,CAAN;AAGD;;AACD,IAAA,SAAS,GAAG,aAAZ,CAA0B,IAA1B;AACA,SAAK,MAAL,GAAc,QAAQ,CAAC,MAAvB;AACA,IAAA,SAAS,GAAG,MAAZ,CAAmB,IAAnB,EAAyB;AAAK;AAA9B;AACD;;AAED,EAAA,OAAO,GAAA;AACL,IAAA,SAAS,GAAG,eAAZ,CAA4B,IAA5B;AACA,SAAK,kBAAL,GAA0B,IAA1B;AACD;;AArC2D;AAwC9D,MAAM,CAAC,cAAP,CAAsB,QAAtB,EAAgC,MAAM,CAAC,WAAvC,EAAoD;AAClD,EAAA,KAAK,EAAG,QAAD,IAAuB;AAC5B,WAAO,QAAQ,YAAY,MAApB,IAA8B,QAAQ,CAAC,MAAT,IAAmB,IAAjD,IACH,QAAQ,CAAC,MAAT,YAA2B,QAD/B;AAED;AAJiD,CAApD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    /** Flatten a Tensor to a 1D array. */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    flatten() {\n        this.throwIfDisposed();\n        return this.as1D();\n    }\n    /** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    asScalar() {\n        this.throwIfDisposed();\n        util.assert(this.size === 1, () => 'The array must have only 1 element.');\n        return this.reshape([]);\n    }\n    /** Converts a `tf.Tensor` to a `tf.Tensor1D`. */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    as1D() {\n        this.throwIfDisposed();\n        return this.reshape([this.size]);\n    }\n    /**\n     * Converts a `tf.Tensor` to a `tf.Tensor2D`.\n     *\n     * @param rows Number of rows in `tf.Tensor2D`.\n     * @param columns Number of columns in `tf.Tensor2D`.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    as2D(rows, columns) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns]);\n    }\n    /**\n     * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n     *\n     * @param rows Number of rows in `tf.Tensor3D`.\n     * @param columns Number of columns in `tf.Tensor3D`.\n     * @param depth Depth of `tf.Tensor3D`.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    as3D(rows, columns, depth) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns, depth]);\n    }\n    /**\n     * Converts a `tf.Tensor` to a `tf.Tensor4D`.\n     *\n     * @param rows Number of rows in `tf.Tensor4D`.\n     * @param columns Number of columns in `tf.Tensor4D`.\n     * @param depth Depth of `tf.Tensor4D`.\n     * @param depth2 4th dimension of `tf.Tensor4D`.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    as4D(rows, columns, depth, depth2) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns, depth, depth2]);\n    }\n    /**\n     * Converts a `tf.Tensor` to a `tf.Tensor5D`.\n     *\n     * @param rows Number of rows in `tf.Tensor5D`.\n     * @param columns Number of columns in `tf.Tensor5D`.\n     * @param depth Depth of `tf.Tensor5D`.\n     * @param depth2 4th dimension of `tf.Tensor5D`.\n     * @param depth3 5th dimension of 'tf.Tensor5D'\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    as5D(rows, columns, depth, depth2, depth3) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns, depth, depth2, depth3]);\n    }\n    /**\n     * Casts a `tf.Tensor` to a specified dtype.\n     *\n     * @param dtype Data-type to cast the tensor to.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    asType(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /** Returns a `tf.TensorBuffer` that holds the underlying data. */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals);\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync());\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /** Casts the array to type `float32` */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    toFloat() {\n        return this.asType('float32');\n    }\n    /** Casts the array to type `int32` */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    toInt() {\n        return this.asType('int32');\n    }\n    /** Casts the array to type `bool` */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    toBool() {\n        return this.asType('bool');\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Reshapes the tensor into the provided shape.\n     * See `tf.reshape` for more details.\n     *\n     * @param newShape An array of integers defining the output tensor shape.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    reshape(newShape) {\n        this.throwIfDisposed();\n        return opHandler.reshape(this, newShape);\n    }\n    /**\n     * Reshapes the tensor into the shape of the provided tensor.\n     *\n     * @param x The tensor of required shape.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    reshapeAs(x) {\n        this.throwIfDisposed();\n        return this.reshape(x.shape);\n    }\n    /**\n     * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n     * into the tensor's shape. See `tf.expandDims` for details.\n     *\n     * @param axis The dimension index at which to insert shape of 1. Defaults to\n     *     0 (the first dimension).\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    expandDims(axis = 0) {\n        return opHandler.expandDims(this, axis);\n    }\n    /**\n     * Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.\n     * See `tf.squeeze` for more details.\n     *\n     * @param axis A list of numbers. If specified, only squeezes the\n     *    dimensions listed. The dimension index starts at 0. It is an error to\n     *    squeeze a dimension that is not 1.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    squeeze(axis) {\n        this.throwIfDisposed();\n        return opHandler.squeeze(this, axis);\n    }\n    /** Returns a copy of the tensor. See `tf.clone` for details. */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    // Below is chain API that is not exposed to docs to avoid repetition. To\n    // expose a method, move it above this comment and add @doc and jsdoc.\n    gather(indices, axis = 0) {\n        this.throwIfDisposed();\n        return opHandler.gather(this, indices, axis);\n    }\n    norm(ord = 'euclidean', axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.norm(this, ord, axis, keepDims);\n    }\n    slice(begin, size) {\n        this.throwIfDisposed();\n        return opHandler.slice(this, begin, size);\n    }\n    reverse(axis) {\n        this.throwIfDisposed();\n        return opHandler.reverse(this, axis);\n    }\n    stack(x, axis = 0) {\n        return opHandler.stack([this, x], axis);\n    }\n    unstack(axis = 0) {\n        return opHandler.unstack(this, axis);\n    }\n    // Reduction ops.\n    all(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.all(this, axis, keepDims);\n    }\n    any(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.any(this, axis, keepDims);\n    }\n    logSumExp(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.logSumExp(this, axis, keepDims);\n    }\n    sum(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.sum(this, axis, keepDims);\n    }\n    prod(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.prod(this, axis, keepDims);\n    }\n    mean(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.mean(this, axis, keepDims);\n    }\n    min(axis = null, keepDims = false) {\n        this.throwIfDisposed();\n        return opHandler.min(this, axis, keepDims);\n    }\n    argMin(axis = null) {\n        this.throwIfDisposed();\n        return opHandler.argMin(this, axis);\n    }\n    argMax(axis = null) {\n        this.throwIfDisposed();\n        return opHandler.argMax(this, axis);\n    }\n    // Transformations\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    // Binary ops.\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    addStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.addStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    subStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.subStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    powStrict(exp) {\n        this.throwIfDisposed();\n        return opHandler.powStrict(this, exp);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    mulStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.mulStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    divStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.divStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    minimumStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.minimumStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    maximumStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.maximumStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    modStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.modStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    squaredDifferenceStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.squaredDifferenceStrict(this, x);\n    }\n    // Compare ops.\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    notEqualStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.notEqualStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    lessStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.lessStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    equalStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.equalStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    lessEqualStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.lessEqualStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    greaterStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.greaterStrict(this, x);\n    }\n    /**\n     * @deprecated strict variants of ops have been deprecated\n     */\n    greaterEqualStrict(x) {\n        this.throwIfDisposed();\n        return opHandler.greaterEqualStrict(this, x);\n    }\n    // Compare ops.\n    logicalAnd(x) {\n        this.throwIfDisposed();\n        return opHandler.logicalAnd(this, x);\n    }\n    logicalOr(x) {\n        this.throwIfDisposed();\n        return opHandler.logicalOr(this, x);\n    }\n    logicalNot() {\n        this.throwIfDisposed();\n        return opHandler.logicalNot(this);\n    }\n    logicalXor(x) {\n        this.throwIfDisposed();\n        return opHandler.logicalXor(this, x);\n    }\n    where(condition, x) {\n        this.throwIfDisposed();\n        return opHandler.where(condition, this, x);\n    }\n    // Unary ops.\n    neg() {\n        this.throwIfDisposed();\n        return opHandler.neg(this);\n    }\n    ceil() {\n        this.throwIfDisposed();\n        return opHandler.ceil(this);\n    }\n    floor() {\n        this.throwIfDisposed();\n        return opHandler.floor(this);\n    }\n    sign() {\n        this.throwIfDisposed();\n        return opHandler.sign(this);\n    }\n    isNaN() {\n        this.throwIfDisposed();\n        return opHandler.isNaN(this);\n    }\n    isInf() {\n        this.throwIfDisposed();\n        return opHandler.isInf(this);\n    }\n    isFinite() {\n        this.throwIfDisposed();\n        return opHandler.isFinite(this);\n    }\n    exp() {\n        this.throwIfDisposed();\n        return opHandler.exp(this);\n    }\n    expm1() {\n        this.throwIfDisposed();\n        return opHandler.expm1(this);\n    }\n    log() {\n        this.throwIfDisposed();\n        return opHandler.log(this);\n    }\n    log1p() {\n        this.throwIfDisposed();\n        return opHandler.log1p(this);\n    }\n    sqrt() {\n        this.throwIfDisposed();\n        return opHandler.sqrt(this);\n    }\n    rsqrt() {\n        this.throwIfDisposed();\n        return opHandler.rsqrt(this);\n    }\n    square() {\n        this.throwIfDisposed();\n        return opHandler.square(this);\n    }\n    reciprocal() {\n        this.throwIfDisposed();\n        return opHandler.reciprocal(this);\n    }\n    abs() {\n        this.throwIfDisposed();\n        return opHandler.abs(this);\n    }\n    clipByValue(min, max) {\n        this.throwIfDisposed();\n        return opHandler.clipByValue(this, min, max);\n    }\n    sigmoid() {\n        this.throwIfDisposed();\n        return opHandler.sigmoid(this);\n    }\n    logSigmoid() {\n        this.throwIfDisposed();\n        return opHandler.logSigmoid(this);\n    }\n    softplus() {\n        this.throwIfDisposed();\n        return opHandler.softplus(this);\n    }\n    zerosLike() {\n        this.throwIfDisposed();\n        return opHandler.zerosLike(this);\n    }\n    onesLike() {\n        this.throwIfDisposed();\n        return opHandler.onesLike(this);\n    }\n    sin() {\n        this.throwIfDisposed();\n        return opHandler.sin(this);\n    }\n    cos() {\n        this.throwIfDisposed();\n        return opHandler.cos(this);\n    }\n    tan() {\n        this.throwIfDisposed();\n        return opHandler.tan(this);\n    }\n    asin() {\n        this.throwIfDisposed();\n        return opHandler.asin(this);\n    }\n    acos() {\n        this.throwIfDisposed();\n        return opHandler.acos(this);\n    }\n    atan() {\n        this.throwIfDisposed();\n        return opHandler.atan(this);\n    }\n    sinh() {\n        this.throwIfDisposed();\n        return opHandler.sinh(this);\n    }\n    cosh() {\n        this.throwIfDisposed();\n        return opHandler.cosh(this);\n    }\n    tanh() {\n        this.throwIfDisposed();\n        return opHandler.tanh(this);\n    }\n    asinh() {\n        this.throwIfDisposed();\n        return opHandler.asinh(this);\n    }\n    acosh() {\n        this.throwIfDisposed();\n        return opHandler.acosh(this);\n    }\n    atanh() {\n        this.throwIfDisposed();\n        return opHandler.atanh(this);\n    }\n    erf() {\n        this.throwIfDisposed();\n        return opHandler.erf(this);\n    }\n    round() {\n        this.throwIfDisposed();\n        return opHandler.round(this);\n    }\n    step(alpha = 0.0) {\n        this.throwIfDisposed();\n        return opHandler.step(this, alpha);\n    }\n    softmax(dim = -1) {\n        this.throwIfDisposed();\n        return opHandler.softmax(this, dim);\n    }\n    logSoftmax(axis = -1) {\n        this.throwIfDisposed();\n        return opHandler.logSoftmax(this, axis);\n    }\n    // Image ops.\n    resizeBilinear(newShape2D, alignCorners = false) {\n        this.throwIfDisposed();\n        return opHandler.image.resizeBilinear(this, newShape2D, alignCorners);\n    }\n    resizeNearestNeighbor(newShape2D, alignCorners = false) {\n        this.throwIfDisposed();\n        return opHandler.image.resizeNearestNeighbor(this, newShape2D, alignCorners);\n    }\n    // Pooling.\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n    unsortedSegmentSum(segmentIds, numSegments) {\n        this.throwIfDisposed();\n        return opHandler.unsortedSegmentSum(this, segmentIds, numSegments);\n    }\n    topk(k = 1, sorted = true) {\n        this.throwIfDisposed();\n        return opHandler.topk(this, k, sorted);\n    }\n    stridedSlice(begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {\n        this.throwIfDisposed();\n        return opHandler.stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    }\n    fft() {\n        this.throwIfDisposed();\n        return opHandler.spectral.fft(this);\n    }\n    ifft() {\n        this.throwIfDisposed();\n        return opHandler.spectral.ifft(this);\n    }\n    rfft() {\n        this.throwIfDisposed();\n        return opHandler.spectral.rfft(this);\n    }\n    irfft() {\n        this.throwIfDisposed();\n        return opHandler.spectral.irfft(this);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        return !!instance && instance.dataId != null && instance.shape != null &&\n            instance.dtype != null;\n    }\n});\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     */\n    /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n//# sourceMappingURL=tensor.js.map"]},"metadata":{},"sourceType":"module"}