{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(getParamValue('x', node, tensorMap, context))];\n\n    case 'Acos':\n      return [tfc.acos(getParamValue('x', node, tensorMap, context))];\n\n    case 'Acosh':\n      return [tfc.acosh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Asin':\n      return [tfc.asin(getParamValue('x', node, tensorMap, context))];\n\n    case 'Asinh':\n      return [tfc.asinh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Atan':\n      return [tfc.atan(getParamValue('x', node, tensorMap, context))];\n\n    case 'Atan2':\n      return [tfc.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n\n    case 'Atanh':\n      return [tfc.atanh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Ceil':\n      return [tfc.ceil(getParamValue('x', node, tensorMap, context))];\n\n    case 'Complex':\n      return [tfc.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n\n    case 'Cos':\n      return [tfc.cos(getParamValue('x', node, tensorMap, context))];\n\n    case 'Cosh':\n      return [tfc.cosh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Elu':\n      return [tfc.elu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Erf':\n      return [tfc.erf(getParamValue('x', node, tensorMap, context))];\n\n    case 'Exp':\n      return [tfc.exp(getParamValue('x', node, tensorMap, context))];\n\n    case 'Expm1':\n      {\n        return [tfc.expm1(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Floor':\n      return [tfc.floor(getParamValue('x', node, tensorMap, context))];\n\n    case 'Log':\n      return [tfc.log(getParamValue('x', node, tensorMap, context))];\n\n    case 'Log1p':\n      {\n        return [tfc.log1p(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Imag':\n      return [tfc.imag(getParamValue('x', node, tensorMap, context))];\n\n    case 'Neg':\n      return [tfc.neg(getParamValue('x', node, tensorMap, context))];\n\n    case 'Reciprocal':\n      {\n        return [tfc.reciprocal(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Real':\n      return [tfc.real(getParamValue('x', node, tensorMap, context))];\n\n    case 'Relu':\n      return [tfc.relu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Round':\n      {\n        return [tfc.round(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Selu':\n      return [tfc.selu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sigmoid':\n      return [tfc.sigmoid(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sin':\n      return [tfc.sin(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sign':\n      {\n        return [tfc.sign(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Sinh':\n      {\n        return [tfc.sinh(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Softplus':\n      {\n        return [tfc.softplus(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Sqrt':\n      {\n        return [tfc.sqrt(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Square':\n      {\n        return [tfc.square(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Tanh':\n      {\n        return [tfc.tanh(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Tan':\n      return [tfc.tan(getParamValue('x', node, tensorMap, context))];\n\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n\n    case 'Prod':\n      return [tfc.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n\n    case 'Prelu':\n      return [tfc.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'basic_math';","map":{"version":3,"sources":["../../../src/operations/executors/basic_math_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n            return [tfc.abs(getParamValue('x', node, tensorMap, context))];\n        case 'Acos':\n            return [tfc.acos(getParamValue('x', node, tensorMap, context))];\n        case 'Acosh':\n            return [tfc.acosh(getParamValue('x', node, tensorMap, context))];\n        case 'Asin':\n            return [tfc.asin(getParamValue('x', node, tensorMap, context))];\n        case 'Asinh':\n            return [tfc.asinh(getParamValue('x', node, tensorMap, context))];\n        case 'Atan':\n            return [tfc.atan(getParamValue('x', node, tensorMap, context))];\n        case 'Atan2':\n            return [tfc.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n        case 'Atanh':\n            return [tfc.atanh(getParamValue('x', node, tensorMap, context))];\n        case 'Ceil':\n            return [tfc.ceil(getParamValue('x', node, tensorMap, context))];\n        case 'Complex':\n            return [tfc.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n        case 'Cos':\n            return [tfc.cos(getParamValue('x', node, tensorMap, context))];\n        case 'Cosh':\n            return [tfc.cosh(getParamValue('x', node, tensorMap, context))];\n        case 'Elu':\n            return [tfc.elu(getParamValue('x', node, tensorMap, context))];\n        case 'Erf':\n            return [tfc.erf(getParamValue('x', node, tensorMap, context))];\n        case 'Exp':\n            return [tfc.exp(getParamValue('x', node, tensorMap, context))];\n        case 'Expm1': {\n            return [tfc.expm1(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Floor':\n            return [tfc.floor(getParamValue('x', node, tensorMap, context))];\n        case 'Log':\n            return [tfc.log(getParamValue('x', node, tensorMap, context))];\n        case 'Log1p': {\n            return [tfc.log1p(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Imag':\n            return [tfc.imag(getParamValue('x', node, tensorMap, context))];\n        case 'Neg':\n            return [tfc.neg(getParamValue('x', node, tensorMap, context))];\n        case 'Reciprocal': {\n            return [tfc.reciprocal(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Real':\n            return [tfc.real(getParamValue('x', node, tensorMap, context))];\n        case 'Relu':\n            return [tfc.relu(getParamValue('x', node, tensorMap, context))];\n        case 'Round': {\n            return [tfc.round(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Selu':\n            return [tfc.selu(getParamValue('x', node, tensorMap, context))];\n        case 'Sigmoid':\n            return [tfc.sigmoid(getParamValue('x', node, tensorMap, context))];\n        case 'Sin':\n            return [tfc.sin(getParamValue('x', node, tensorMap, context))];\n        case 'Sign': {\n            return [tfc.sign(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sinh': {\n            return [tfc.sinh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Softplus': {\n            return [tfc.softplus(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sqrt': {\n            return [tfc.sqrt(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Square': {\n            return [tfc.square(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tanh': {\n            return [tfc.tanh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tan':\n            return [tfc.tan(getParamValue('x', node, tensorMap, context))];\n        case 'Relu6':\n        case 'ClipByValue':\n            return [tfc.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n        case 'Rsqrt':\n            return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n            return [tfc.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n        case 'LeakyRelu':\n            return [tfc.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'Prelu':\n            return [tfc.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'basic_math';\n//# sourceMappingURL=basic_math_executor.js.map"]},"metadata":{},"sourceType":"module"}