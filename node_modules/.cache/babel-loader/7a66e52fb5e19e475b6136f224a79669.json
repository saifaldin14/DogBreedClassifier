{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n */\n\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\n\nfunction multiRNNCell_(lstmCells, data, c, h) {\n  const $data = convertToTensor(data, 'data', 'multiRNNCell');\n  const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n  let input = $data;\n  const newStates = [];\n\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n\n  const newC = [];\n  const newH = [];\n\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n\n  return [newC, newH];\n}\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n */\n\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\n\n\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n  const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n  const combined = $data.concat($h, 1);\n  const weighted = combined.matMul($lstmKernel);\n  const res = weighted.add($lstmBias); // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize = [batchSize, sliceCols];\n  const i = res.slice([0, 0], sliceSize);\n  const j = res.slice([0, sliceCols], sliceSize);\n  const f = res.slice([0, sliceCols * 2], sliceSize);\n  const o = res.slice([0, sliceCols * 3], sliceSize);\n  const newC = i.sigmoid().mul(j.tanh()).add($c.mul($forgetBias.add(f).sigmoid()));\n  const newH = newC.tanh().mul(o.sigmoid());\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = op({\n  basicLSTMCell_\n});\nexport const multiRNNCell = op({\n  multiRNNCell_\n});","map":{"version":3,"sources":["../../src/ops/lstm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n */\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\nfunction multiRNNCell_(lstmCells, data, c, h) {\n    const $data = convertToTensor(data, 'data', 'multiRNNCell');\n    const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n    const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n    let input = $data;\n    const newStates = [];\n    for (let i = 0; i < lstmCells.length; i++) {\n        const output = lstmCells[i](input, $c[i], $h[i]);\n        newStates.push(output[0]);\n        newStates.push(output[1]);\n        input = output[1];\n    }\n    const newC = [];\n    const newH = [];\n    for (let i = 0; i < newStates.length; i += 2) {\n        newC.push(newStates[i]);\n        newH.push(newStates[i + 1]);\n    }\n    return [newC, newH];\n}\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n */\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n    const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n    const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n    const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n    const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n    const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n    const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n    const combined = $data.concat($h, 1);\n    const weighted = combined.matMul($lstmKernel);\n    const res = weighted.add($lstmBias);\n    // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n    const batchSize = res.shape[0];\n    const sliceCols = res.shape[1] / 4;\n    const sliceSize = [batchSize, sliceCols];\n    const i = res.slice([0, 0], sliceSize);\n    const j = res.slice([0, sliceCols], sliceSize);\n    const f = res.slice([0, sliceCols * 2], sliceSize);\n    const o = res.slice([0, sliceCols * 3], sliceSize);\n    const newC = i.sigmoid().mul(j.tanh()).add($c.mul($forgetBias.add(f).sigmoid()));\n    const newH = newC.tanh().mul(o.sigmoid());\n    return [newC, newH];\n}\nexport const basicLSTMCell = op({ basicLSTMCell_ });\nexport const multiRNNCell = op({ multiRNNCell_ });\n//# sourceMappingURL=lstm.js.map"]},"metadata":{},"sourceType":"module"}