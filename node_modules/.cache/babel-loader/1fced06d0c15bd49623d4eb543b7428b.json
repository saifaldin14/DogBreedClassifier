{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { addGradConfig } from './gradients/Add_grad';\nimport { addNGradConfig } from './gradients/AddN_grad';\nimport { atan2GradConfig } from './gradients/Atan2_grad';\nimport { avgPool3DGradConfig } from './gradients/AvgPool3D_grad';\nimport { avgPoolGradConfig } from './gradients/AvgPool_grad';\nimport { batchMatMulGradConfig } from './gradients/BatchMatMul_grad';\nimport { batchToSpaceNDGradConfig } from './gradients/BatchToSpaceND_grad';\nimport { broadcastToGradConfig } from './gradients/BroadcastTo_grad';\nimport { concatGradConfig } from './gradients/Concat_grad';\nimport { conv2DGradConfig } from './gradients/Conv2D_grad';\nimport { conv2DBackpropInputGradConfig } from './gradients/Conv2DBackpropInput_grad';\nimport { conv3DGradConfig } from './gradients/Conv3D_grad';\nimport { cumsumGradConfig } from './gradients/Cumsum_grad';\nimport { depthwiseConv2dNativeGradConfig } from './gradients/DepthwiseConv2dNative_grad';\nimport { divGradConfig } from './gradients/Div_grad';\nimport { eluGradConfig } from './gradients/Elu_grad';\nimport { floorDivGradConfig } from './gradients/FloorDiv_grad';\nimport { fusedBatchNormGradConfig } from './gradients/FusedBatchNorm_grad';\nimport { greaterEqualGradConfig } from './gradients/GreaterEqual_grad';\nimport { identityGradConfig } from './gradients/Identity_grad';\nimport { lrnGradConfig } from './gradients/LRN_grad';\nimport { maxGradConfig } from './gradients/Max_grad';\nimport { maximumGradConfig } from './gradients/Maximum_grad';\nimport { maxPool3DGradConfig } from './gradients/MaxPool3D_grad';\nimport { maxPoolGradConfig } from './gradients/MaxPool_grad';\nimport { minimumGradConfig } from './gradients/Minimum_grad';\nimport { modGradConfig } from './gradients/Mod_grad';\nimport { multiplyGradConfig } from './gradients/Multiply_grad';\nimport { oneHotGradConfig } from './gradients/OneHot_grad';\nimport { padV2GradConfig } from './gradients/PadV2_grad';\nimport { powGradConfig } from './gradients/Pow_grad';\nimport { preluGradConfig } from './gradients/Prelu_grad';\nimport { relu6GradConfig } from './gradients/Relu6_grad';\nimport { reluGradConfig } from './gradients/Relu_grad';\nimport { seluGradConfig } from './gradients/Selu_grad';\nimport { spaceToBatchNDGradConfig } from './gradients/SpaceToBatchND_grad';\nimport { splitVGradConfig } from './gradients/SplitV_grad';\nimport { squareGradConfig } from './gradients/Square_grad';\nimport { squaredDifferenceGradConfig } from './gradients/SquaredDifference_grad';\nimport { subGradConfig } from './gradients/Sub_grad';\nimport { tileGradConfig } from './gradients/Tile_grad';\nimport { transposeGradConfig } from './gradients/Transpose_grad';\nimport { registerGradient } from './kernel_registry'; // Export all kernel configs here so that the package can auto register them\n\nconst gradConfigs = [addGradConfig, addNGradConfig, atan2GradConfig, avgPoolGradConfig, avgPool3DGradConfig, batchMatMulGradConfig, batchToSpaceNDGradConfig, broadcastToGradConfig, concatGradConfig, conv2DGradConfig, conv2DBackpropInputGradConfig, conv3DGradConfig, cumsumGradConfig, depthwiseConv2dNativeGradConfig, divGradConfig, eluGradConfig, floorDivGradConfig, fusedBatchNormGradConfig, greaterEqualGradConfig, identityGradConfig, lrnGradConfig, oneHotGradConfig, padV2GradConfig, splitVGradConfig, maxGradConfig, spaceToBatchNDGradConfig, maxGradConfig, maximumGradConfig, maxPoolGradConfig, maxPool3DGradConfig, minimumGradConfig, modGradConfig, multiplyGradConfig, oneHotGradConfig, padV2GradConfig, powGradConfig, preluGradConfig, reluGradConfig, relu6GradConfig, seluGradConfig, spaceToBatchNDGradConfig, splitVGradConfig, squareGradConfig, squaredDifferenceGradConfig, tileGradConfig, transposeGradConfig, subGradConfig];\n\nfor (const gradientConfig of gradConfigs) {\n  registerGradient(gradientConfig);\n}","map":{"version":3,"sources":["../src/register_all_gradients.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,cAAR,QAA6B,uBAA7B;AACA,SAAQ,eAAR,QAA8B,wBAA9B;AACA,SAAQ,mBAAR,QAAkC,4BAAlC;AACA,SAAQ,iBAAR,QAAgC,0BAAhC;AACA,SAAQ,qBAAR,QAAoC,8BAApC;AACA,SAAQ,wBAAR,QAAuC,iCAAvC;AACA,SAAQ,qBAAR,QAAoC,8BAApC;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,6BAAR,QAA4C,sCAA5C;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,+BAAR,QAA8C,wCAA9C;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,kBAAR,QAAiC,2BAAjC;AACA,SAAQ,wBAAR,QAAuC,iCAAvC;AACA,SAAQ,sBAAR,QAAqC,+BAArC;AACA,SAAQ,kBAAR,QAAiC,2BAAjC;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,iBAAR,QAAgC,0BAAhC;AACA,SAAQ,mBAAR,QAAkC,4BAAlC;AACA,SAAQ,iBAAR,QAAgC,0BAAhC;AACA,SAAQ,iBAAR,QAAgC,0BAAhC;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,kBAAR,QAAiC,2BAAjC;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,eAAR,QAA8B,wBAA9B;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,eAAR,QAA8B,wBAA9B;AACA,SAAQ,eAAR,QAA8B,wBAA9B;AACA,SAAQ,cAAR,QAA6B,uBAA7B;AACA,SAAQ,cAAR,QAA6B,uBAA7B;AACA,SAAQ,wBAAR,QAAuC,iCAAvC;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,2BAAR,QAA0C,oCAA1C;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,cAAR,QAA6B,uBAA7B;AACA,SAAQ,mBAAR,QAAkC,4BAAlC;AAEA,SAAQ,gBAAR,QAA+B,mBAA/B,C,CAEA;;AACA,MAAM,WAAW,GAAiB,CAChC,aADgC,EAEhC,cAFgC,EAGhC,eAHgC,EAIhC,iBAJgC,EAKhC,mBALgC,EAMhC,qBANgC,EAOhC,wBAPgC,EAQhC,qBARgC,EAShC,gBATgC,EAUhC,gBAVgC,EAWhC,6BAXgC,EAYhC,gBAZgC,EAahC,gBAbgC,EAchC,+BAdgC,EAehC,aAfgC,EAgBhC,aAhBgC,EAiBhC,kBAjBgC,EAkBhC,wBAlBgC,EAmBhC,sBAnBgC,EAoBhC,kBApBgC,EAqBhC,aArBgC,EAsBhC,gBAtBgC,EAuBhC,eAvBgC,EAwBhC,gBAxBgC,EAyBhC,aAzBgC,EA0BhC,wBA1BgC,EA2BhC,aA3BgC,EA4BhC,iBA5BgC,EA6BhC,iBA7BgC,EA8BhC,mBA9BgC,EA+BhC,iBA/BgC,EAgChC,aAhCgC,EAiChC,kBAjCgC,EAkChC,gBAlCgC,EAmChC,eAnCgC,EAoChC,aApCgC,EAqChC,eArCgC,EAsChC,cAtCgC,EAuChC,eAvCgC,EAwChC,cAxCgC,EAyChC,wBAzCgC,EA0ChC,gBA1CgC,EA2ChC,gBA3CgC,EA4ChC,2BA5CgC,EA6ChC,cA7CgC,EA8ChC,mBA9CgC,EA+ChC,aA/CgC,CAAlC;;AAkDA,KAAK,MAAM,cAAX,IAA6B,WAA7B,EAA0C;AACxC,EAAA,gBAAgB,CAAC,cAAD,CAAhB;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { addGradConfig } from './gradients/Add_grad';\nimport { addNGradConfig } from './gradients/AddN_grad';\nimport { atan2GradConfig } from './gradients/Atan2_grad';\nimport { avgPool3DGradConfig } from './gradients/AvgPool3D_grad';\nimport { avgPoolGradConfig } from './gradients/AvgPool_grad';\nimport { batchMatMulGradConfig } from './gradients/BatchMatMul_grad';\nimport { batchToSpaceNDGradConfig } from './gradients/BatchToSpaceND_grad';\nimport { broadcastToGradConfig } from './gradients/BroadcastTo_grad';\nimport { concatGradConfig } from './gradients/Concat_grad';\nimport { conv2DGradConfig } from './gradients/Conv2D_grad';\nimport { conv2DBackpropInputGradConfig } from './gradients/Conv2DBackpropInput_grad';\nimport { conv3DGradConfig } from './gradients/Conv3D_grad';\nimport { cumsumGradConfig } from './gradients/Cumsum_grad';\nimport { depthwiseConv2dNativeGradConfig } from './gradients/DepthwiseConv2dNative_grad';\nimport { divGradConfig } from './gradients/Div_grad';\nimport { eluGradConfig } from './gradients/Elu_grad';\nimport { floorDivGradConfig } from './gradients/FloorDiv_grad';\nimport { fusedBatchNormGradConfig } from './gradients/FusedBatchNorm_grad';\nimport { greaterEqualGradConfig } from './gradients/GreaterEqual_grad';\nimport { identityGradConfig } from './gradients/Identity_grad';\nimport { lrnGradConfig } from './gradients/LRN_grad';\nimport { maxGradConfig } from './gradients/Max_grad';\nimport { maximumGradConfig } from './gradients/Maximum_grad';\nimport { maxPool3DGradConfig } from './gradients/MaxPool3D_grad';\nimport { maxPoolGradConfig } from './gradients/MaxPool_grad';\nimport { minimumGradConfig } from './gradients/Minimum_grad';\nimport { modGradConfig } from './gradients/Mod_grad';\nimport { multiplyGradConfig } from './gradients/Multiply_grad';\nimport { oneHotGradConfig } from './gradients/OneHot_grad';\nimport { padV2GradConfig } from './gradients/PadV2_grad';\nimport { powGradConfig } from './gradients/Pow_grad';\nimport { preluGradConfig } from './gradients/Prelu_grad';\nimport { relu6GradConfig } from './gradients/Relu6_grad';\nimport { reluGradConfig } from './gradients/Relu_grad';\nimport { seluGradConfig } from './gradients/Selu_grad';\nimport { spaceToBatchNDGradConfig } from './gradients/SpaceToBatchND_grad';\nimport { splitVGradConfig } from './gradients/SplitV_grad';\nimport { squareGradConfig } from './gradients/Square_grad';\nimport { squaredDifferenceGradConfig } from './gradients/SquaredDifference_grad';\nimport { subGradConfig } from './gradients/Sub_grad';\nimport { tileGradConfig } from './gradients/Tile_grad';\nimport { transposeGradConfig } from './gradients/Transpose_grad';\nimport { registerGradient } from './kernel_registry';\n// Export all kernel configs here so that the package can auto register them\nconst gradConfigs = [\n    addGradConfig,\n    addNGradConfig,\n    atan2GradConfig,\n    avgPoolGradConfig,\n    avgPool3DGradConfig,\n    batchMatMulGradConfig,\n    batchToSpaceNDGradConfig,\n    broadcastToGradConfig,\n    concatGradConfig,\n    conv2DGradConfig,\n    conv2DBackpropInputGradConfig,\n    conv3DGradConfig,\n    cumsumGradConfig,\n    depthwiseConv2dNativeGradConfig,\n    divGradConfig,\n    eluGradConfig,\n    floorDivGradConfig,\n    fusedBatchNormGradConfig,\n    greaterEqualGradConfig,\n    identityGradConfig,\n    lrnGradConfig,\n    oneHotGradConfig,\n    padV2GradConfig,\n    splitVGradConfig,\n    maxGradConfig,\n    spaceToBatchNDGradConfig,\n    maxGradConfig,\n    maximumGradConfig,\n    maxPoolGradConfig,\n    maxPool3DGradConfig,\n    minimumGradConfig,\n    modGradConfig,\n    multiplyGradConfig,\n    oneHotGradConfig,\n    padV2GradConfig,\n    powGradConfig,\n    preluGradConfig,\n    reluGradConfig,\n    relu6GradConfig,\n    seluGradConfig,\n    spaceToBatchNDGradConfig,\n    splitVGradConfig,\n    squareGradConfig,\n    squaredDifferenceGradConfig,\n    tileGradConfig,\n    transposeGradConfig,\n    subGradConfig\n];\nfor (const gradientConfig of gradConfigs) {\n    registerGradient(gradientConfig);\n}\n//# sourceMappingURL=register_all_gradients.js.map"]},"metadata":{},"sourceType":"module"}