{"ast":null,"code":"var _jsxFileName = \"/Users/saifal-dinali/Desktop/Projects/React Projects/DogBreedClassifier/DogBreedClassifier/src/App.js\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport React, { useReducer, useRef, useState } from 'react';\nimport './App.css';\nconst stateMachine = {\n  initial: {\n    on: {\n      next: 'loadingModel'\n    }\n  },\n  loadingModel: {\n    on: {\n      next: 'awaitingUpload'\n    }\n  },\n  awaitingUpload: {\n    on: {\n      next: 'imageReady'\n    }\n  },\n  imageReady: {\n    on: {\n      next: 'classifying'\n    }\n  },\n  classifying: {\n    on: {\n      next: 'complete'\n    }\n  },\n  complete: {\n    on: {\n      next: 'awaitingUpload'\n    }\n  }\n};\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: {\n      on: {\n        next: 'loadingModel'\n      }\n    },\n    loadingModel: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    },\n    awaitingUpload: {\n      on: {\n        next: 'imageReady'\n      }\n    },\n    imageReady: {\n      on: {\n        next: 'classifying',\n        showImage: true\n      }\n    },\n    classifying: {\n      on: {\n        next: 'complete'\n      }\n    },\n    complete: {\n      on: {\n        next: 'awaitingUpload'\n      },\n      showImage: true,\n      showResult: true\n    }\n  }\n};\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) => machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const {\n      files\n    } = event.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: {\n      action: loadModel,\n      text: \"Load Model\"\n    },\n    loadingModel: {\n      text: \"Loading Model...\"\n    },\n    modelReady: {\n      action: upload,\n      text: \"Upload Image\"\n    },\n    imageReady: {\n      action: identify,\n      text: \"Identify Breed\"\n    },\n    identifying: {\n      text: \"Identifying...\"\n    },\n    complete: {\n      action: reset,\n      text: \"Reset\"\n    }\n  };\n  const {\n    showImage,\n    showResult\n  } = machine.states[appState];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, showImage && /*#__PURE__*/React.createElement(\"img\", {\n    src: imageUrl,\n    alt: \"upload-preview\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/React Projects/DogBreedClassifier/DogBreedClassifier/src/App.js"],"names":["mobilenet","React","useReducer","useRef","useState","stateMachine","initial","on","next","loadingModel","awaitingUpload","imageReady","classifying","complete","machine","states","showImage","showResult","App","results","setResults","imageUrl","setImageUrl","model","setModel","imageRef","inputRef","reducer","state","event","appState","dispatch","loadModel","load","identify","classify","current","reset","upload","click","handleUpload","files","target","length","url","URL","createObjectURL","actionButton","action","text","modelReady","identifying"],"mappings":"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","sourcesContent":["import * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport React, { useReducer, useRef, useState } from 'react';\nimport './App.css';\n\nconst stateMachine = {\n  initial: { on: { next: 'loadingModel' } },\n  loadingModel: { on: { next: 'awaitingUpload' } },\n  awaitingUpload: { on: { next: 'imageReady' } },\n  imageReady: { on: { next: 'classifying' } },\n  classifying: { on: { next: 'complete' } },\n  complete: { on: { next: 'awaitingUpload' } },\n}\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: 'loadingModel' } },\n    loadingModel: { on: { next: 'awaitingUpload' } },\n    awaitingUpload: { on: { next: 'imageReady' } },\n    imageReady: { on: { next: 'classifying', showImage: true } },\n    classifying: { on: { next: 'complete' } },\n    complete: { on: { next: 'awaitingUpload' }, showImage: true, showResult: true },\n  }\n}\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = (event) => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify Breed\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" }\n  };\n  const { showImage, showResult } = machine.states[appState];\n\n  return (\n    <div>\n      {showImage && <img src={imageUrl} alt=\"upload-preview\" ref={imageRef} />}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}