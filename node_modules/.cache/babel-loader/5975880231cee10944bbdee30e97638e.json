{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { div, scalar, sub, zerosLike } from '../ops/ops';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n  constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon;\n    this.decay = decay;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedWeightedInfNorm = [];\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr = div(-this.learningRate, this.iteration.mul(this.decay).add(1));\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n        const newFirstMoment = firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));\n        const ut0 = weightedInfNorm.mul(this.beta2);\n        const ut1 = gradient.abs();\n        const newWeightedInfNorm = ut0.maximum(ut1);\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n        const newValue = lr.div(oneMinusAccBeta1).mul(newFirstMoment.div(newWeightedInfNorm.add(this.epsilon))).add(value);\n        value.assign(newValue);\n      });\n      this.iteration.assign(this.iteration.add(1));\n      this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  async getWeights() {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  async setWeights(weightValues) {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n  }\n\n}\n/** @nocollapse */\n\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\n\nregisterClass(AdamaxOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adamax_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { div, scalar, sub, zerosLike } from '../ops/ops';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.decay = decay;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedWeightedInfNorm = [];\n        tidy(() => {\n            this.iteration = scalar(0).variable();\n            this.accBeta1 = scalar(beta1).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const lr = div(-this.learningRate, this.iteration.mul(this.decay).add(1));\n            variableNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                if (this.accumulatedWeightedInfNorm[i] == null) {\n                    this.accumulatedWeightedInfNorm[i] = {\n                        originalName: `${name}/v`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n                const newFirstMoment = firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));\n                const ut0 = weightedInfNorm.mul(this.beta2);\n                const ut1 = gradient.abs();\n                const newWeightedInfNorm = ut0.maximum(ut1);\n                firstMoment.assign(newFirstMoment);\n                weightedInfNorm.assign(newWeightedInfNorm);\n                const newValue = lr.div(oneMinusAccBeta1)\n                    .mul(newFirstMoment.div(newWeightedInfNorm.add(this.epsilon)))\n                    .add(value);\n                value.assign(newValue);\n            });\n            this.iteration.assign(this.iteration.add(1));\n            this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.iteration.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedWeightedInfNorm != null) {\n            dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        throw new Error('getWeights() is not implemented for Adamax yet.');\n    }\n    async setWeights(weightValues) {\n        throw new Error('setWeights() is not implemented for Adamax yet.');\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n            'decay': this.decay\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n    }\n}\n/** @nocollapse */\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\nregisterClass(AdamaxOptimizer);\n//# sourceMappingURL=adamax_optimizer.js.map"]},"metadata":{},"sourceType":"module"}