{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n    outputs.forEach(r => {\n      // Dangling promise here because we don't want to propagate up\n      // asynchronicity.\n      r.data().then(vals => {\n        checkComputationForErrors(vals, r.dtype, kernelName);\n        timer.then(timing => {\n          let extraInfo = '';\n\n          if (timing.getExtraProfileInfo != null) {\n            extraInfo = timing.getExtraProfileInfo();\n          }\n\n          this.logger.logKernelProfile(kernelName, r, vals, timing.kernelMs, inputs, extraInfo);\n        });\n      });\n    });\n    return outputs;\n  }\n\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name]; // The input might be a non-tensor (e.g HTMLImageElement), in which case\n      // we claim the output shape as input shape.\n\n      const inputShape = input.shape || result.shape;\n      const inputRank = inputShape.length;\n      inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n    }\n\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n\n}","map":{"version":3,"sources":["../src/profiler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        const timer = this.backendTimer.time(holdResultWrapperFn);\n        outputs.forEach(r => {\n            // Dangling promise here because we don't want to propagate up\n            // asynchronicity.\n            r.data().then(vals => {\n                checkComputationForErrors(vals, r.dtype, kernelName);\n                timer.then(timing => {\n                    let extraInfo = '';\n                    if (timing.getExtraProfileInfo != null) {\n                        extraInfo = timing.getExtraProfileInfo();\n                    }\n                    this.logger.logKernelProfile(kernelName, r, vals, timing.kernelMs, inputs, extraInfo);\n                });\n            });\n        });\n        return outputs;\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            // The input might be a non-tensor (e.g HTMLImageElement), in which case\n            // we claim the output shape as input shape.\n            const inputShape = input.shape || result.shape;\n            const inputRank = inputShape.length;\n            inputShapesDescription +=\n                `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n//# sourceMappingURL=profiler.js.map"]},"metadata":{},"sourceType":"module"}